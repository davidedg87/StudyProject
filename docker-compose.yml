version: '3.8'

services:
  redis:
    image: redis:latest
    container_name: my-redis
    ports:
      - "6379:6379"  # Esponi la porta di Redis
    volumes:
      - redis_data:/data  # Monta un volume per la persistenza dei dati
 
  postgres:
    image: postgres:latest
    container_name: my-postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: order-monitoring-db
    ports:
      - "6543:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Aggiungi questa riga
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: my-rabbitmq
    ports:
      - "5672:5672" # Porta per le connessioni AMQP
      - "15672:15672" # Porta per l'interfaccia di gestione
    networks:
      - app_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # Volume per RabbitMQ
    
  order_management_consumer:
    build:
      context: .  # Imposta il contesto al livello superiore
      dockerfile: OrderManagement.MessageConsumer/Dockerfile  # Specifica il percorso del Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=order-monitoring-db;Username=myuser;Password=mypassword;"
      RabbitMq__Host: "rabbitmq"
      Elastic__Url: "http://elasticsearch:9200"
      Redis__Host: "redis"
    ports:
      - "5000:80"
    depends_on:
      - postgres
      - rabbitmq
      - elasticsearch
    networks:
      - app_network
      
  order_background_service:
    build:
      context: .  # Imposta il contesto al livello superiore
      dockerfile: OrderManagement.BackgroundServices/Dockerfile  # Specifica il percorso del Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=order-monitoring-db;Username=myuser;Password=mypassword;"
      RabbitMq__Host: "rabbitmq"
      Elastic__Url: "http://elasticsearch:9200"
      Redis__Host: "redis"
    ports:
      - "5001:80"
    depends_on:
      - postgres
      - rabbitmq
      - elasticsearch
    networks:
      - app_network
      
  order_management_api:
    build:
      context: .  # Imposta il contesto al livello superiore
      dockerfile: OrderManagement.API/Dockerfile  # Specifica il percorso del Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=order-monitoring-db;Username=myuser;Password=mypassword;"
      RabbitMq__Host: "rabbitmq"
      Elastic__Url: "http://elasticsearch:9200"
      Redis__Host: "redis"
    ports:
      - "5002:8080"
    depends_on:
      - postgres
      - rabbitmq
      - elasticsearch
    networks:
      - app_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: my-elastic-search
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - app_network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data  # Volume per Elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: my-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app_network

networks:
  app_network:
    driver: bridge
    
volumes:
  postgres_data:  # Volume per PostgreSQL
  rabbitmq_data:  # Volume per RabbitMQ
  elasticsearch_data:  # Volume per Elasticsearch
  redis_data: #Volume per Redis
